@model PagedList.IPagedList<QLNS.Models.User>
@using PagedList.Mvc
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="col-md-12">
    <div class="row">
        <p class="col-md-6">
            @Html.ActionLink("Thêm mới", "Create", null, new { @class = "btn btn-primary" })
        </p>
        <div class="col-md-6">
            <form action="/Users/Index" method="get" class="d-flex float-right">
                <input type="text" name="TextSearch" value="@ViewBag.TextSearch" class="form-control w-75" />
                <input type="submit" class="btn btn-info" value="Tìm Kiếm" />
            </form>
        </div>
    </div>
</div>
<div id="table-content">
    <table class="table table-bordered">
        <tr>
            <th>
                @Html.Label("Tên Tài Khoản")
            </th>
            <th>
                @Html.Label("Quyền")
            </th>
            <th></th>
        </tr>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Username)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Role)
                </td>
                <td>
                    @Html.ActionLink("Sửa", "Edit", new { id = item.UserId }) |
                    @Html.ActionLink("Xem", "Details", new { id = item.UserId }) |
                    @Html.ActionLink("Xóa", "Delete", new { id = item.UserId })
                </td>
            </tr>
        }
        @if (Model.Count() == 0)
        {
            <tr>
                <td colspan="4" class="text-center">Không có dữ liệu</td>
            </tr>
        }
    </table>
    @Html.PagedListPager(
    Model,
    PageIndex => Url.Action("Index", "Users", new { PageIndex }),
    new PagedListRenderOptions
    {
        LiElementClasses = new string[] { "page-item" },
        UlElementClasses = new List<string> { "pagination", "pagination sm" },
        ContainerDivClasses = new List< string > { "nav text-xs-center" },
        FunctionToTransformEachPageLink = (liTag, aTag) => { aTag.Attributes.Add("class", "page-link"); liTag.InnerHtml = aTag.ToString(); return liTag; },
        LinkToPreviousPageFormat = "Previous",
        LinkToNextPageFormat = "Next",
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always
    }
)
</div>